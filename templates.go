// Code generated by go-bindata.
// sources:
// templates/.DS_Store
// templates/index.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDs_store = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x98\xb1\x4a\xc4\x40\x14\x45\xef\x1b\x53\x04\xb7\x99\xd2\x32\xa5\x95\xe0\x1f\x84\x65\x2d\x6c\xf5\x07\x64\x5d\x8b\x85\xe8\x0a\xab\x60\x99\xce\x9f\xf3\x9f\x22\x33\xef\x82\x03\x9b\x80\x8d\xb8\x1b\xee\x81\x70\x8a\xcc\x9d\x3c\x52\x4c\xde\x0b\x00\x5b\xbe\x6f\xae\x81\x08\xa0\x86\x1b\x9f\x18\xa5\xe6\x75\x40\x28\x6c\x79\x8f\x0f\x5c\xe1\x0d\xcf\x78\x45\x37\xbe\xd7\xe8\x1e\xe7\xd8\xe2\x05\x1b\x3c\x95\xf9\xdb\x6e\xf7\xb8\xee\x76\x6b\x2f\xce\xee\x00\x5c\xa6\xf5\xc3\x90\x73\x0b\xec\xd1\x61\x9b\x53\xfb\xa9\x14\xbe\x52\x6a\xc8\xfc\xb2\x1e\x21\x84\x10\x62\xee\x98\xab\x5e\xfc\x77\x21\x42\x88\xa3\x23\x9d\x0f\x0d\xdd\xd2\xbd\xdb\x78\x3f\xd0\x55\x91\x89\x74\x43\xb7\x74\xef\x36\xae\x0b\x74\x45\xd7\x74\xa4\x1b\xba\xa5\x7b\x37\x0f\x2d\xe3\xf0\x61\x7c\xb2\x71\x42\xb1\x48\x37\x74\xfb\x37\xef\x46\x88\x53\xe7\xcc\x15\xd3\xf7\xff\x66\x7a\xfe\x17\x42\xcc\x18\xab\x56\xf7\xab\xe5\xcf\x40\x70\x40\x60\x23\xf0\x50\x86\x26\x9a\x80\xe0\x3f\x0b\x2f\x8a\x75\x6a\x04\x84\x38\x32\xbe\x03\x00\x00\xff\xff\xb4\x4e\xe1\xd1\x04\x18\x00\x00")

func templatesDs_storeBytes() ([]byte, error) {
	return bindataRead(
		_templatesDs_store,
		"templates/.DS_Store",
	)
}

func templatesDs_store() (*asset, error) {
	bytes, err := templatesDs_storeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/.DS_Store", size: 6148, mode: os.FileMode(420), modTime: time.Unix(1477146560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x4c\xd9\x00\xa2\x9a\x98\x84\x6f\xad\x4c\xaa\x87\x00\x45\x0b\x04\x6d\x11\xd7\xa7\x24\x87\xf1\x72\xc4\x5d\x79\x3f\xd8\x9d\xa5\x6d\xc5\xe0\x7f\x2f\x48\x8a\x14\x25\xcb\x40\x5c\x45\xa7\xdd\x9d\x99\x37\x33\x6f\xdf\x0e\x95\xc9\x60\xf4\x6a\x96\x49\xc2\x62\x35\x03\x00\xc8\x82\x0a\x9a\x56\xd7\x5a\x15\xc4\x59\xda\xef\x7a\x8b\xa1\x80\x20\x24\x7a\xa6\x90\x47\x75\x58\x5f\xfc\x1c\xed\x4c\x5a\xd9\x3b\x90\x9e\xd6\x79\x54\xd5\xb7\x5a\x89\x34\x48\x32\xc4\xe9\xd3\x13\x24\xff\xb4\x4b\x68\x9a\x54\x30\xa7\x9e\x0c\xfa\xbb\x44\x30\x47\x60\xa8\x50\x98\x47\xa8\x75\x04\x9e\x74\x1e\x71\xd8\x6a\x62\x49\x14\x22\x08\xdb\x8a\xf2\x28\xd0\x63\x48\x3b\xe7\xf4\xd5\xa9\x0c\x79\x83\xaa\xf8\x7f\xb9\x66\x59\xda\x93\x92\xdd\xba\x62\xdb\xee\x59\x78\x55\x05\x60\x2f\xf2\x28\xdd\xa5\xde\x0c\x0d\x5d\x68\x0c\xc4\x21\x31\xca\x26\x1b\x3e\x40\xdc\xe0\x3d\xf6\xb1\xd1\x2a\x4b\xfb\xd5\xea\x45\xb8\xa1\xe8\xb3\x81\x3c\x3e\x14\xb4\x6e\xcb\x3a\x0f\xa7\xd2\x68\xc3\x8d\xd1\xe7\xa1\x6c\xfe\xad\xc9\x6f\x2f\x2e\x93\x5f\x92\xcb\xa1\xb7\x6f\x69\xa2\x27\xf7\xab\x73\xe6\x4c\x36\x7a\x20\x83\xc2\x3b\x3e\x0f\xea\xbd\x44\xff\x1d\x2e\xba\xaf\x48\xbc\x0e\x6c\x94\xe1\x6a\xd0\x89\xb2\x2a\x28\xd4\xea\x2b\xc5\x4f\x1c\xd0\x87\xbf\xec\x07\x87\xc5\x32\xf8\x9a\x9a\xc5\xd5\xb3\x3a\xfa\x57\x74\x8f\x1e\xcc\xb6\x7f\xe4\x7f\xa2\x21\xc8\x41\x3b\x81\x41\x39\x9b\x30\xa1\x17\x32\xe1\x4a\xab\x10\xcf\xb9\xf3\xc9\xe7\x8b\x4f\x97\x5f\xae\xba\xd8\x34\x3d\x11\xdd\x3e\xbe\xee\xe0\xe6\xe3\x1f\xd0\x34\xb3\x31\x0b\x4f\xbd\x0e\x82\x7e\x3d\xdc\x2e\x61\x2e\x9d\xa1\xc4\x14\xf3\xab\x31\x5a\x23\x87\xf7\xce\x06\xb2\x01\x72\x88\xa2\xde\x22\x9c\x65\xa7\x29\xd1\xae\x8c\xa7\x18\x8b\xe7\x66\x9e\x1a\x8f\x8a\x92\xee\x01\x72\x18\x06\x92\x27\x0c\x14\x3f\x75\x3e\xed\x8f\x5d\xed\x05\xdd\x78\xbd\x9c\xf4\xf0\x6e\x34\x4b\x55\x4a\xad\x4a\x19\xae\xdb\x39\xb2\x84\xb9\x71\xd6\xdd\xa1\x9a\xef\x5d\x7c\xcb\x27\x2c\x3b\x6e\x3e\x76\xeb\xa6\xd9\x5b\x2d\xde\xab\xb2\x63\x7c\x09\xfb\xac\x5d\x66\xe1\x9d\xd6\x4b\x68\xaf\xf0\x5d\xcb\x37\x14\x8a\xf1\x56\x13\x58\x2c\xd5\x7d\x17\x03\x35\x2b\x5b\xee\x5c\x0f\xa2\xc7\xc2\x3e\x28\x4b\xdc\xa3\xb4\x18\xbf\x0f\xe7\x70\x8b\xe2\xae\xf4\xae\xb6\x05\xb8\x35\x08\x57\x10\xe8\xd6\x17\x2a\x4f\x6b\xf5\x48\x05\x3c\xa8\x20\xe1\xa7\x11\xb6\xe9\x56\xcd\xc0\x60\x8b\xd6\x49\x0d\x26\x1a\xde\x77\x3d\xd1\x75\x2b\xce\x78\x24\x7b\x88\x7f\x93\xe0\x06\x1f\x27\x54\xd7\x2f\x91\xcc\xb5\x10\xc4\xbc\x84\x75\x6d\x45\xdb\x76\x0c\x9e\xb8\x72\x96\x09\x16\x47\xac\xa9\x35\xc4\x13\xb9\xfc\x90\x0f\x9e\xc7\x8e\x1d\xf0\x50\x53\xa2\x1d\x16\xbf\x79\x67\xae\x83\x57\xb6\x8c\xab\xf6\xeb\xf6\xf7\x6e\xe4\xc5\x23\xc4\x4e\x59\xc7\xf9\x4c\xfe\xa0\x6c\xd1\xa1\xec\x1e\x8f\x44\x96\x89\xc1\x20\x64\x9c\x7e\xfe\x31\xfe\x5c\xbc\x5d\xbc\x49\x17\xa7\x4a\x38\x56\x6a\x54\xba\xe0\xfa\xc2\x20\x7a\x6b\x3e\x5d\x7e\x39\x91\xf4\xb0\xf6\x36\xa2\x53\x7f\xfc\x82\x7b\xf3\xec\x64\xc2\xd0\x48\xd0\xec\x74\xc8\xfe\xd6\xfb\x2b\xff\xc6\x89\x33\x9b\x4c\xab\x2c\xed\x3f\x9e\x59\xda\xff\xcf\xf8\x2f\x00\x00\xff\xff\xd8\x72\x37\x09\x6f\x08\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 2159, mode: os.FileMode(420), modTime: time.Unix(1510734798, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/.DS_Store": templatesDs_store,
	"templates/index.tmpl": templatesIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		".DS_Store": &bintree{templatesDs_store, map[string]*bintree{}},
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

